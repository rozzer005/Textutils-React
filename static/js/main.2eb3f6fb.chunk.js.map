{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","name","value","htmlFor","onClick","toggleMode","TextForm","useState","text","setText","style","color","heading","onChange","event","target","rows","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","replace","split","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2eb3f6fb.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n            {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n            </li>\r\n        </ul>\r\n        <div className=\"radio-button\">\r\n            <input type=\"radio\" id=\"radiored\" name=\"radios\" value=\"all\" />\r\n            <label htmlFor=\"radiored\">Red</label>\r\n            <input type=\"radio\" id=\"radiogreen\" name=\"radios\" value=\"false\" />\r\n            <label htmlFor=\"radiogreen\">Green</label>\r\n            <input type=\"radio\" id=\"radioblue\" name=\"radios\" value=\"true\" />\r\n            <label htmlFor=\"radioblue\">Blue</label>\r\n            </div>\r\n        <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n        </div>\r\n        {/* <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n        </form> */}\r\n        </div>\r\n    </div>\r\n    </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n    title:'Title',\r\n    aboutText:'Abouttext'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Upper case was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to uppercase\",\"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n        // console.log(\"Upper case was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to Lowercase\",\"success\");\r\n    }\r\n    const handleRemoveSpaceClick = ()=>{\r\n        let newText  = text.replace(/\\s/g,'');\r\n        setText(newText);\r\n        props.showAlert(\"Removed spaces\",\"success\");\r\n    }\r\n    // const handleItalicsClick = ()=>{\r\n    //     // console.log(\"Upper case was clicked\" + text);\r\n    //     let newText = text.italics();\r\n    //     setText(newText);\r\n    // }\r\n    // const handleStrikeClick = ()=>{\r\n    //     // console.log(\"Upper case was clicked\" + text);\r\n    //     let newText = text.strike();\r\n    //     setText(newText);\r\n    // }\r\n    const handleClearClick = ()=>{\r\n        // console.log(\"Upper case was clicked\" + text);\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\",\"success\");\r\n    }\r\n    const handleOnChnage = (event)=>{\r\n        // console.log(\"on change\");\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n           <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChnage} id=\"myBox\" rows=\"8\" style={{backgroundColor: props.mode === 'dark'?'#090c56':'white', color: props.mode === 'dark'?'white':'black'}} ></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleRemoveSpaceClick}>Font Increased Text</button>\r\n            \r\n            \r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h2>Your Text summary Here</h2>\r\n            <p><strong>{text.split(\" \").length}</strong> Words and <strong>{text.length}</strong> Characters</p>\r\n            <p><strong>{0.008 * text.split(\" \").length}</strong> Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:'Enter the text above to preview the text here......'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n         props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)} </strong> {props.alert.msg}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor=\"#090c56\";\n      showAlert(\"Dark mode enabled\",\"success\");\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor=\"white\";\n      showAlert(\"light mode enabled\",\"success\");\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode}/>\n    <Alert  alert={alert}/>\n    <div className=\"container my-3\">\n  \n    {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n          <TextForm  showAlert={showAlert} heading=\"Enter the text below to analyze below\" mode={mode} />\n          {/* </Route>\n        </Switch> */}\n        </div>\n    {/* </Router> */}\n   \n    </>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}